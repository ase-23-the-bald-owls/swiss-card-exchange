name: "build images"
on:
  workflow_dispatch:
    inputs:
      trigger:
        type: string
        default: 'workflow_dispatch'
  workflow_call:
    inputs:
      trigger:
        type: string
        default: 'workflow_call'
  push:
    paths:
      - '.github/workflows/build-images.yml'
      - '**/Dockerfile'
      - 'docker-compose.yml'

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  build-info:
    runs-on: ubuntu-latest
    outputs:
      repo-owner: ${{ steps.repo-owner.outputs.result }}
      tags: ${{ steps.image-tags.outputs.image-tags }}
      build-config: ${{ steps.build-info.outputs.result }}
    steps:

      #github forces lower case for the image name
      - name: Get lowercase repo owner name
        uses: actions/github-script@v6
        id: repo-owner
        with:
          result-encoding: string
          script: |
            return context.repo.owner.toLowerCase()

      - uses: actions/checkout@v3

      - name: Set nightly tag if commit was on main
        id: add-nightly-tag
        if: startsWith(github.ref, 'refs/heads/main')
        run: |
          echo "nightly-tag=nightly" | tr -d "\n"  >> $GITHUB_OUTPUT

      - name: Set latest tag if its a tag
        id: add-latest-tag
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo "latest-tag=latest" | tr -d "\n"  >> $GITHUB_OUTPUT

      - uses: actions/github-script@v6
        id: get-tag
        if: startsWith(github.ref, 'refs/tags/')
        with:
          result-encoding: string
          script: |
            return context.payload.ref.replace('refs/tags/', '')

      - name: concat tags to list
        id: image-tags
        run: |
          TAGS=$(cat <<-END
              [
              "${{ github.sha }}",
              "${{ steps.add-nightly-tag.outputs.nightly-tag }}",
              "${{ steps.add-latest-tag.outputs.latest-tag }}",
              "${{ steps.get-tag.outputs.result }}"
              ]
          END
          )
          TAGS=$(echo $TAGS | jq -c 'map(select(length > 0))')
          echo "image-tags=$TAGS" | tr -d "\n"  >> $GITHUB_OUTPUT

      - name: Get bulid info
        id: build-info
        run: |
          set -x
          sudo snap install yq

          cp .env.example .env
          docker compose --profile local-run config > /tmp/docker-compose.yml
          BUILD_INFO=$(cat /tmp/docker-compose.yml | yq '.services.[] | select(.build != null) | [.build * {"image": .image}]' -o=json)
          BUILD_INFO=$(echo $BUILD_INFO | jq -c -s add | sed "s|:local||g")
          echo "result=$BUILD_INFO" | tr -d "\n"  >> $GITHUB_OUTPUT
        env:
          REPO_OWNER: ${{ steps.repo-owner.outputs.result }}
          VERSION: local
          SCE_DOCKERFILE_PATH: app/Dockerfile
          MAIL_FUNCTION_DOCKERFILE_PATH: mail-function/Dockerfile

  build-image:
    runs-on: ubuntu-latest
    needs:
      - build-info
    strategy:
      fail-fast: false
      matrix:
        build-config: ${{ fromJSON(needs.build-info.outputs.build-config) }}
    env:
      tags: ${{ needs.build-info.outputs.tags }}
      repo-owner: ${{ needs.build-info.outputs.repo-owner }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/github-script@v6
        id: should-build-arm
        with:
          result-encoding: string
          script: |
            const moreThanOneTag = JSON.parse('${{ env.tags }}').length > 1
            console.log('moreThanOneTag', moreThanOneTag)
            const isWorkflowDispatch = '${{ inputs.trigger }}' === 'workflow_dispatch'
            console.log('isWorkflowDispatch', isWorkflowDispatch)
            const isWorkflowCall = '${{ inputs.trigger }}' === 'workflow_call'
            console.log('isWorkflowCall', isWorkflowCall)
            const isDirectPush = (context.eventName === 'push' && !isWorkflowCall)
            console.log('isDirectPush', isDirectPush)
            return (moreThanOneTag || isWorkflowDispatch || isDirectPush) ? 'true' : 'false'

      - uses: actions/github-script@v6
        id: architectures
        with:
          script: |
            const initialArchs = ['amd64']
            if (${{ steps.should-build-arm.outputs.result }}) {
              return [...initialArchs, 'arm64']
            }
            return initialArchs

      - uses: actions/github-script@v6
        id: architecture-config
        with:
          script: |
            const plain = JSON.parse('${{ steps.architectures.outputs.result }}')
            return {
              plain,
              withOsPrefix: plain.map(arch => `linux/${arch}`)
            }

      - run: |
          echo "inputs:"
          cat <<-HEREDOC
          ${{ toJSON(inputs) }}
          HEREDOC
          
          echo "build config:"
          cat <<-HEREDOC
          ${{ toJSON(matrix.build-config) }}
          HEREDOC
          
          echo "architecture-config:"
          cat <<-HEREDOC
          ${{ steps.architecture-config.outputs.result }}
          HEREDOC
          
          echo "build tags:"
          cat <<-HEREDOC
          ${{ env.tags }}
          HEREDOC
          
          echo "build repo owner:"
          cat <<-HEREDOC
          ${{ env.repo-owner }}
          HEREDOC

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: ${{ join(fromJSON(steps.architecture-config.outputs.result).plain) }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USER }}
          password: ${{ secrets.GHCR_TOKEN }}

      - uses: actions/github-script@v6
        id: expand-tags
        with:
          script: |
            return JSON.parse('${{ env.tags }}').map(tag => `${{ matrix.build-config.image }}:${ tag }`)

      - run: cp .env.example .env.local
        working-directory: app

      - name: Build and push image
        uses: docker/build-push-action@v4
        with:
          push: true
          platforms: ${{ join(fromJSON(steps.architecture-config.outputs.result).withOsPrefix) }}
          file: ${{ matrix.build-config.dockerfile }}
          tags: ${{ join(fromJSON(steps.expand-tags.outputs.result)) }}
          context: ${{ matrix.build-config.context }}
          cache-from: type=gha,scope=${{ matrix.build-config.image }}
          cache-to: type=gha,scope=${{ matrix.build-config.image }},mode=max
